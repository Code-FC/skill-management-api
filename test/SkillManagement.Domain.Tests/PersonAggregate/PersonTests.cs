using System;
using System.Linq;
using AutoFixture;
using AutoFixture.Idioms;
using AutoFixture.Xunit2;
using FluentAssertions;
using SkillManagement.Domain.PersonAggregate;
using Xunit;

namespace SkillManagement.Domain.Tests.PersonAggregate
{
    public class PersonTests
    {
        [Fact]
        public void GuardConstructorParametersAgainstNullValues()
        {
            var fixture = new Fixture();
            var assertion = new GuardClauseAssertion(fixture);
            assertion.Verify(typeof(Person).GetConstructors());
        }

        [Theory]
        [AutoData]
        public void GivenValidParametersIncludingId_PersonIsCreatedSuccessfully(Guid id, string name, string email)
        {
            var person = new Person(id, email, name);

            person.Id.Should().Be(id);
            person.Name.Should().Be(name);
            person.Email.Should().Be(email);
        }

        [Theory]
        [AutoData]
        public void GivenValidParametersWithoutId_PersonIsCreatedSuccessfullyWithAutoGeneratedId(string name,
            string email)
        {
            var person = new Person(email, name);

            person.Id.Should().NotBe(default(Guid));
            person.Name.Should().Be(name);
            person.Email.Should().Be(email);
            person.Endorsements.Should().BeEmpty();
            person.Evaluations.Should().BeEmpty();
        }

        [Fact]
        public void GuardEndorsementInvalidParameters()
        {
            var fixture = new Fixture();
            var assertion = new GuardClauseAssertion(fixture);
            assertion.Verify(typeof(Person).GetMethod(nameof(Person.AddEndorsement)));
        }

        [Theory, AutoData]
        public void GivenValidEndorsement_ItemIsAddedSuccessfully(
            Person endorsee,
            Person endorser,
            Skill skill,
            string comment)
        {
            endorsee.AddEndorsement(endorser, skill, comment);
            endorsee.Endorsements.Should().Contain(e =>
                e.Comment.Equals(comment) &&
                e.Skill.Equals(skill) &&
                e.Endorser.Equals(endorser));
            endorsee.Evaluations.Should()
                .ContainSingle(e => e.Skill.Equals(skill) && e.Level.Equals(EvaluationLevel.NotEvaluated));
        }

        [Theory, AutoData]
        public void GivenValidEndorsementForSkillEvaluated_EvaluationIsKept(Person endorsee, Person endorser, Skill skill,
            string comment)
        {
            endorsee.SaveEvaluation(skill, EvaluationLevel.Level1);
            endorsee.AddEndorsement(endorser, skill, comment);
            endorsee.Endorsements.Should().Contain(e =>
                e.Comment.Equals(comment) &&
                e.Skill.Equals(skill) &&
                e.Endorser.Equals(endorser));
            endorsee.Evaluations.Should()
                .ContainSingle(e => e.Skill.Equals(skill) && e.Level.Equals(EvaluationLevel.Level1));
        }

        [Fact]
        public void GuardEvaluationInvalidParameters()
        {
            var fixture = new Fixture();
            var assertion = new GuardClauseAssertion(fixture);
            assertion.Verify(typeof(Person).GetMethod(nameof(Person.SaveEvaluation)));
        }

        [Theory, AutoData]
        public void GivenValidEvaluation_ItemIsAddedSuccessfullyAndSkillIsAdded(Person person, Skill skill,
            EvaluationLevel level)
        {
            person.SaveEvaluation(skill, level);
            person.Evaluations.Should().ContainSingle(e => e.Skill.Equals(skill) && e.Level.Equals(level));
        }

        [Theory, AutoData]
        public void GivenExistingEvaluation_ItemIsUpdatedSuccessfully(Person person, Skill skill)
        {
            const EvaluationLevel oldLevel = EvaluationLevel.Level1;
            const EvaluationLevel newLevel = EvaluationLevel.Level2;

            person.SaveEvaluation(skill, oldLevel);
            person.SaveEvaluation(skill, newLevel);
            person.Evaluations
                .Should().ContainSingle(e => e.Skill.Equals(skill))
                .And.Subject.First().Level.Should().Be(newLevel);
        }
    }
}
